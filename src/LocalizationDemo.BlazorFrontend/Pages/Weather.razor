@page "/weather"
@inject HttpClient Http
@using LocalizationDemo.BlazorFrontend.Services
@inject LanguageService LanguageService

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server with localization.</p>
<p><strong>Current Language:</strong> @LanguageService.CurrentLanguage</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
    </div>
    <button class="btn btn-primary" @onclick="LoadForecasts">Retry</button>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        LanguageService.LanguageChanged += OnLanguageChanged;
        await LanguageService.InitializeAsync();
        LanguageService.ConfigureHttpClient(Http);
        await LoadForecasts();
    }

    private async Task LoadForecasts()
    {
        try
        {
            errorMessage = null;
            forecasts = null;
            StateHasChanged();
            
            // Ensure HttpClient has the correct Accept-Language header
            LanguageService.ConfigureHttpClient(Http);
            
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/weatherforecast");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load weather data: {ex.Message}";
            forecasts = null;
        }
        
        StateHasChanged();
    }

    private async void OnLanguageChanged(string newLanguage)
    {
        await LoadForecasts();
    }

    public void Dispose()
    {
        LanguageService.LanguageChanged -= OnLanguageChanged;
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
