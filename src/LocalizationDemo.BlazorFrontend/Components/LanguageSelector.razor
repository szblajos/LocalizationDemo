@using LocalizationDemo.BlazorFrontend.Services
@inject LanguageService LanguageService

<div class="language-selector">
    <a href="#" @onclick:preventDefault="true" @onclick="ToggleDropdown" class="language-link">
        @GetLanguageDisplay(LanguageService.CurrentLanguage) 
        <span class="dropdown-arrow">â–¼</span>
    </a>
    
    @if (showDropdown)
    {
        <div class="language-dropdown">
            @foreach (var lang in LanguageService.SupportedLanguages)
            {
                <button type="button" 
                        class="language-option @(lang.Key == LanguageService.CurrentLanguage ? "active" : "")"
                        @onclick="() => SelectLanguage(lang.Key)">
                    @lang.Value
                </button>
            }
        </div>
    }
</div>

<style>
    .language-selector {
        position: relative;
        display: inline-block;
    }

    .language-link {
        color: white;
        text-decoration: none;
        padding: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .language-link:hover {
        color: #d0d0d0;
        text-decoration: none;
    }

    .dropdown-arrow {
        font-size: 0.8rem;
        transition: transform 0.3s ease;
    }

    .language-dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        background: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        z-index: 1000;
        min-width: 120px;
    }

    .language-option {
        display: block;
        width: 100%;
        padding: 0.5rem 1rem;
        border: none;
        background: none;
        text-align: left;
        cursor: pointer;
        color: #333;
    }

    .language-option:hover {
        background-color: #f5f5f5;
    }

    .language-option.active {
        background-color: #007bff;
        color: white;
    }
</style>

@code {
    private bool showDropdown = false;

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
    }

    private async Task SelectLanguage(string language)
    {
        await LanguageService.SetLanguageAsync(language);
        showDropdown = false;
    }

    private string GetLanguageDisplay(string languageCode)
    {
        return LanguageService.SupportedLanguages.TryGetValue(languageCode, out var display) 
            ? display 
            : languageCode;
    }

    protected override async Task OnInitializedAsync()
    {
        LanguageService.LanguageChanged += OnLanguageChanged;
        await LanguageService.InitializeAsync();
    }

    private void OnLanguageChanged(string newLanguage)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        LanguageService.LanguageChanged -= OnLanguageChanged;
    }
}